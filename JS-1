JS-1 
//This is an inline comment
/*This is a 
muti-line comment*/
var myName
var myVar;
myVar = 8;

//JS-2
var someVariable;
var anotherVariableName;
//var 和 let 关键字之间的差异
let camper = "milton";
const ABB = "KeepCoding";
//使用 const 声明的变量是只读的。 它们是一个常量值，这意味着一旦一个变量被赋值为 const，它就不能被重新赋值
const myVar = 12 + 12;
let myVar = 1;
myVar++;//等于myVar = myVar + 1 ;
myVar--;//等于myVar = myVar - 1 ;

//2022-06-16
//创建小数
var myDecimal = 1.1;
//小数相乘
const product = 1.0 * 2.0;
const quotient = 4.4 / 2.0;
2022-06-17
求余运算
var remainder = 11 % 3 ;
//复合赋值+=
myVar = myVar + 5;
let a = 3;
let b = 2;
let c = 1;
a += 4;
b += 5;
//复合赋值-=
let a = 11;
//使a=5 
a-=6;
//复合赋值*=
let a = 5;
//使a=25
a *= 5;
//复合赋值之 /=
let a = 48;
//要求a=4
a /= 12;
//2022-06-22 转义字符串中的引号
const myStr = "I am a \"double quoted\" string inside \"double quotes\"."
//用单引号引用字符串
const myStr = '<a href="http://www.example.com" target="_blank">Link</a>';
//06-24 转义字符
\'	单引号
\"	双引号
\\	反斜杠
\n	换行符
\r	回车符
\t	制表符
\b	退格
\f	换页符
const myStr ="FirstLine\n\t\\SecondLine\nThirdLine";
FirstLine
    \SecondLine
ThirdLine
//2022-06-27
用加号运算符连接字符串
const myStr = "This is the start. " + "This is the end.";
用 += 运算符连接字符串
let myStr= "This is the first sentence. ";
myStr+= "This is the second sentence.";
//输出：This is the first sentence. This is the second sentence.
用变量构造字符串
//2022-06-28
连接运算符（+），你可以插入一个或多个变量来组成一个字符串。
const ourName = "freeCodeCamp";
const ourStr = "Hello, our name is " + ourName + ", how are you?";
ourStr 值为 Hello, our name is freeCodeCamp, how are you?
使用加且赋值（+=）运算符将字符串追加到字符串的末尾。
const anAdjective = "awesome!";
let ourStr = "freeCodeCamp is ";
ourStr += anAdjective;
ourStr 值为 freeCodeCamp is awesome!
//07-01 Find the Length of a String
在字符串变量或字符串后面写上 .length 来获得 String 的长度。
let lastNameLength = 0;
const lastName = "Lovelace";
lastNameLength = lastName.length;
//07-18使用方括号查找字符串中的第一个字符
const firstName = "Charles";
const firstLetter = firstName[0];
firstLetter 值为字符串 C 
// 07-19 了解字符串的不变性
let myStr = "Bob";
myStr[0] = "J";
是不会把变量 myStr 的值改变成 Job 的，因为变量 myStr 是不可变的。 
注意，这并不意味着 myStr 永远不能被改变，只是字符串字面量 string literal 的各个字符不能被改变。 改变 myStr 的唯一方法是重新给它赋一个值，例如：
let myStr = "Bob";
myStr = "Job";
const firstName = "Ada";
const secondLetterOfFirstName = firstName[1];
secondLetterOfFirstName 值应该为字符串 d。
//07-20 使用方括号查找字符串中的最后一个字符
const firstName = "Ada";
const lastLetter = firstName[firstName.length - 1];
lastLetter 值为字符串 a
使用方括号查找字符串中的倒数第 N 个字符
例如，你可以使用 firstName[firstName.length - 3] 获取 const firstName = "Augusta" 字符串的倒数第三个字母的值
//07-22 Mad Libs 游戏
使用字符串连接运算符 + 来拼接字符串变量：myNoun、myAdjective、myVerb 和 myAdverb 来构建一个新字符串。 然后，将新字符串赋给 wordBlanks 变量
//07-24 
//07-27 填词造句
It was really ____, and we ____ ourselves ____。
const sentence = "It was really " + "hot" + ", and we " + "laughed" + " ourselves " + "silly" + ".";
const myNoun = "dog";
const myAdjective = "big";
const myVerb = "ran";
const myAdverb = "quickly";
// 只修改这一行下面的代码
const wordBlanks = "The" + " " + myAdjective + " " + myNoun + " " + myVerb + " " + myAdverb + "."; // 修改这一行
// 只修改这一行上面的代码
使用 JavaScript 数组将多个值存储在一个变量中
使用数组（array），我们可以在一个地方存储多个数据。
const myArray = ["j", 22];
将一个数组嵌套在另一个数组中
07-30
const teams = [["Bulls", 23], ["White Sox", 45]];
07-31 通过索引访问数组中的数据
我们可以使用索引（indexes）来访问数组中的数据。
const array = [50, 60, 70];
console.log(array[0]);
const data = array[1];
通过索引修改数组中的数据
与字符串不同，数组的条目是 可变的 并且可以自由更改，即使数组是用 const 声明的。
const ourArray = [50, 40, 30];
ourArray[0] = 15;
ourArray 值为 [15, 40, 30]
使用索引访问多维数组
08-01 
const arr = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14]
];
arr[3];
arr[3][0];
arr[3][0][1];
arr[3] 为 [[10, 11, 12], 13, 14]，arr[3][0] 为 [10, 11, 12]，并且 arr[3][0][1] 为 11。
08-02 使用 push() 操作数组
一个将数据添加到数组末尾的简单方法是 push() 函数
const arr1 = [1, 2, 3];
arr1.push(4);
const arr2 = ["Stimpson", "J", "cat"];
arr2.push(["happy", "joy"]);
arr1 现在值为 [1, 2, 3, 4]，arr2 值为 ["Stimpson", "J", "cat", ["happy", "joy"]]。
使用 pop() 操作数组
改变数组中数据的另一种方法是用 .pop() 函数。
.pop() 函数用来弹出一个数组末尾的值。 我们可以把这个弹出的值赋给一个变量存储起来。 换句话说就是 .pop() 函数移除数组末尾的元素并返回这个元素。
数组中任何类型的元素（数值，字符串，甚至是数组）都可以被弹出来 。
const threeArr = [1, 4, 6];
const oneDown = threeArr.pop();
console.log(oneDown);
console.log(threeArr);
第一个 console.log 将显示值 6，第二个将显示值 [1, 4]。
使用 shift() 操作数组 如果想要移出第一个元素要怎么办呢？
这时候我们就需要 .shift() 了。 它的工作原理就像 .pop()，但它移除的是第一个元素，而不是最后一个。
const ourArray = ["Stimpson", "J", ["cat"]];
const removedFromOurArray = ourArray.shift();
removedFromOurArray 值为 Stimpson，ourArray 值为 ["J", ["cat"]]
08-05 使用 unshift() 操作数组
.unshift() 函数用起来就像 .push() 函数一样，但不是在数组的末尾添加元素，unshift() 在数组的头部添加元素。
const ourArray = ["Stimpson", "J", "cat"];
ourArray.shift();
ourArray.unshift("Happy");
在 shift、ourArray 后值为 ["J", "cat"]。 在 unshift、ourArray 后值为 ["Happy", "J", "cat"]。
购物清单 创建一个名叫 myList 的购物清单。 清单的数据格式就是多维数组。
各组数据需用【】隔开
用函数编写可重用代码 在 JavaScript 中，我们可以把代码的重复部分抽取出来，放到一个函数 （functions）中。
function functionName() {
  console.log("Hello World");
}
functionName();
你可以通过函数名加上后面的小括号来调用（invoke）这个函数，就像这样： functionName(); 每次调用函数时，它都会在控制台上打印消息 Hello World。 
每次调用函数时，大括号之间的所有代码都将被执行。
将值传递给带有参数的函数
08-06 
function functionWithArgs(a, b) {
  console.log(a+b);
}
functionWithArgs(1, 2)
08-07 使用 return 给函数返回值
08-08 
function plusThree(num) {
  return num + 3;
}

const answer = plusThree(5);
answer 的值为 8。
function timesFive(num) {
  return num *5;
}

const answer = timesFive(5);
08-10 全局作用域和函数
局部作用域和函数
function myTest() {
  const loc = "foo";
  console.log(loc);
}

myTest();
console.log(loc);
myTest() 函数调用将在控制台中显示字符串 foo。
08-14
https://www.w3schools.com
08-15 函数中的全局作用域和局部作用域
一个程序中有可能具有相同名称的局部变量 和全局变量。 在这种情况下，局部变量将会优先于全局变量
const someVar = "Hat";

function myFun() {
  const someVar = "Head";
  return someVar;
}
函数 myFun 将会返回字符串 Head，因为局部变量的优先级更高。
08-17 函数也可以返回 undefined
函数一般用 return 语句来返回值，但这不是必须的。 在函数没有 return 语句的情况下，当你调用它时，该函数会执行内部代码，返回的值是 undefined
let sum = 0;

function addSum(num) {
  sum = sum + num;
}

addSum(3);
08-18 使用返回值赋值
在使用赋值运算符存储值中的讨论的话，等号右侧的所有操作都会在赋值之前完成。 这意味着我们可以获取函数的返回值，并将其赋值给一个变量。
假设我们有一个预先定义的函数 sum ，它将两个数相加，然后：
ourSum = sum(5, 12);
将调用 sum 函数，该函数返回 17 的值并将其分配给 ourSum 变量。
08-19 调用 processArg 函数，参数为 7，然后把返回的值赋值给变量 processed。
// 设置
let processed = 0;
function processArg(num) {
  return (num + 3) / 5;
}
// 只修改这一行下面的代码
processed = processArg(7);
08-22 排队 在计算机科学中队列（queue）是一个抽象的数据结构（Data Structure），队列中的条目都是有秩序的。 新的条目会被加到队列的末尾，旧的条目会从队列的头部被移出
08-23 写一个函数 nextInLine，用一个数组（arr）和一个数字（item）作为参数。
把数字添加到数组的结尾，然后移出数组的第一个元素。
最后 nextInLine 函数应该返回被删除的元素。
function nextInLine(arr, item) {
  // 只修改这一行下面的代码
  arr.push(item);
  return arr.shift(item);
  // 只修改这一行上面的代码
}

// 设置
const testArr = [1, 2, 3, 4, 5];

// 显示代码
console.log("Before: " + JSON.stringify(testArr));
console.log(nextInLine(testArr, 6));
console.log("After: " + JSON.stringify(testArr));
08-24 理解布尔值 布尔（Boolean） 布尔值只能是两个值中的一个：true 或者 false。 它非常像电路开关，true 是 “开”，false 是 “关”。 这两种状态是互斥的。
function welcomeToBooleans() {
  // 只修改这一行下面的代码

  return true; // 修改这一行

  // 只修改这一行上面的代码
}
08-25 用 if 语句来表达条件逻辑.if 语句用于在代码中做出决定.关键字 if 告诉 JavaScript 在小括号中的条件为真的情况下去执行定义在大括号里面的代码。
这种条件被称为 Boolean 条件，因为他们只可能是 true（真）或 false（假）。
当条件的计算结果为 true，程序执行大括号内的语句。 当布尔条件的计算结果为 false，大括号内的代码将不会执行。
if（条件为真）{
语句被执行
}
在函数内部创建一个 if 语句，如果该参数 wasThatTrue 值为 true，返回 Yes, that was true，否则，返回No, that was false。
function trueOrFalse(wasThatTrue) {
  // 只修改这一行下面的代码
  if (wasThatTrue) {
    return "Yes, that was true";
  }
  return "No, that was false";
}
  // 只修改这一行上面的代码
08-27 JavaScript 中，有很多 相互比较的操作。 所有这些操作符都返回一个 true 或 false 值。
最基本的运算符是相等运算符：== 不同于赋值运算符（=），赋值运算符是把等号右边的值赋给左边的变量
08-28 严格相等运算符
严格相等运算符（===）是相对相等操作符（==）的另一种比较操作符。 与相等操作符转换数据两类型不同，严格相等运算符不会做类型转换。
如果比较的值类型不同，那么在严格相等运算符比较下它们是不相等的，会返回 false 。
3 ===  3  // true
3 === '3' // false
08-29 相等运算符 (==) 和严格相等运算符 (===)
如果要比较的值不是同一类型，相等运算符会先执行数据类型转换，然后比较值。 而严格相等运算符只比较值，不会进行数据类型转换。
不相等运算符（!=）与相等运算符是相反的。 这意味着不相等并返回 false 的地方，用相等运算符会返回 true，反之亦然
1 !=  2    // true
1 != "1"   // false
1 != '1'   // false
1 != true  // false
0 != false // false
严格不相等运算符（!==）与全等运算符是相反的。 这意味着严格不相等并返回 false 的地方，用严格相等运算符会返回 true，反之亦然。 严格不相等运算符不会转换值的数据类型。
3 !==  3  // false
3 !== '3' // true
4 !==  3  // true





