JS-1 
//This is an inline comment
/*This is a 
muti-line comment*/
var myName
var myVar;
myVar = 8;

//JS-2
var someVariable;
var anotherVariableName;
//var 和 let 关键字之间的差异
let camper = "milton";
const ABB = "KeepCoding";
//使用 const 声明的变量是只读的。 它们是一个常量值，这意味着一旦一个变量被赋值为 const，它就不能被重新赋值
const myVar = 12 + 12;
let myVar = 1;
myVar++;//等于myVar = myVar + 1 ;
myVar--;//等于myVar = myVar - 1 ;

//2022-06-16
//创建小数
var myDecimal = 1.1;
//小数相乘
const product = 1.0 * 2.0;
const quotient = 4.4 / 2.0;
2022-06-17
求余运算
var remainder = 11 % 3 ;
//复合赋值+=
myVar = myVar + 5;
let a = 3;
let b = 2;
let c = 1;
a += 4;
b += 5;
//复合赋值-=
let a = 11;
//使a=5 
a-=6;
//复合赋值*=
let a = 5;
//使a=25
a *= 5;
//复合赋值之 /=
let a = 48;
//要求a=4
a /= 12;
//2022-06-22 转义字符串中的引号
const myStr = "I am a \"double quoted\" string inside \"double quotes\"."
//用单引号引用字符串
const myStr = '<a href="http://www.example.com" target="_blank">Link</a>';
//06-24 转义字符
\'	单引号
\"	双引号
\\	反斜杠
\n	换行符
\r	回车符
\t	制表符
\b	退格
\f	换页符
const myStr ="FirstLine\n\t\\SecondLine\nThirdLine";
FirstLine
    \SecondLine
ThirdLine
//2022-06-27
用加号运算符连接字符串
const myStr = "This is the start. " + "This is the end.";
用 += 运算符连接字符串
let myStr= "This is the first sentence. ";
myStr+= "This is the second sentence.";
//输出：This is the first sentence. This is the second sentence.
用变量构造字符串
//2022-06-28
连接运算符（+），你可以插入一个或多个变量来组成一个字符串。
const ourName = "freeCodeCamp";
const ourStr = "Hello, our name is " + ourName + ", how are you?";
ourStr 值为 Hello, our name is freeCodeCamp, how are you?
使用加且赋值（+=）运算符将字符串追加到字符串的末尾。
const anAdjective = "awesome!";
let ourStr = "freeCodeCamp is ";
ourStr += anAdjective;
ourStr 值为 freeCodeCamp is awesome!
//07-01 Find the Length of a String
在字符串变量或字符串后面写上 .length 来获得 String 的长度。
let lastNameLength = 0;
const lastName = "Lovelace";
lastNameLength = lastName.length;
//07-18使用方括号查找字符串中的第一个字符
const firstName = "Charles";
const firstLetter = firstName[0];
firstLetter 值为字符串 C 
// 07-19 了解字符串的不变性
let myStr = "Bob";
myStr[0] = "J";
是不会把变量 myStr 的值改变成 Job 的，因为变量 myStr 是不可变的。 
注意，这并不意味着 myStr 永远不能被改变，只是字符串字面量 string literal 的各个字符不能被改变。 改变 myStr 的唯一方法是重新给它赋一个值，例如：
let myStr = "Bob";
myStr = "Job";
const firstName = "Ada";
const secondLetterOfFirstName = firstName[1];
secondLetterOfFirstName 值应该为字符串 d。
//07-20 使用方括号查找字符串中的最后一个字符
const firstName = "Ada";
const lastLetter = firstName[firstName.length - 1];
lastLetter 值为字符串 a
使用方括号查找字符串中的倒数第 N 个字符
例如，你可以使用 firstName[firstName.length - 3] 获取 const firstName = "Augusta" 字符串的倒数第三个字母的值
//07-22 Mad Libs 游戏
使用字符串连接运算符 + 来拼接字符串变量：myNoun、myAdjective、myVerb 和 myAdverb 来构建一个新字符串。 然后，将新字符串赋给 wordBlanks 变量
//07-24 
//07-27 填词造句
It was really ____, and we ____ ourselves ____。
const sentence = "It was really " + "hot" + ", and we " + "laughed" + " ourselves " + "silly" + ".";
const myNoun = "dog";
const myAdjective = "big";
const myVerb = "ran";
const myAdverb = "quickly";
// 只修改这一行下面的代码
const wordBlanks = "The" + " " + myAdjective + " " + myNoun + " " + myVerb + " " + myAdverb + "."; // 修改这一行
// 只修改这一行上面的代码
使用 JavaScript 数组将多个值存储在一个变量中
使用数组（array），我们可以在一个地方存储多个数据。
const myArray = ["j", 22];
将一个数组嵌套在另一个数组中
07-30
const teams = [["Bulls", 23], ["White Sox", 45]];
07-31 通过索引访问数组中的数据
我们可以使用索引（indexes）来访问数组中的数据。
const array = [50, 60, 70];
console.log(array[0]);
const data = array[1];
通过索引修改数组中的数据
与字符串不同，数组的条目是 可变的 并且可以自由更改，即使数组是用 const 声明的。
const ourArray = [50, 40, 30];
ourArray[0] = 15;
ourArray 值为 [15, 40, 30]
使用索引访问多维数组
08-01 
const arr = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14]
];
arr[3];
arr[3][0];
arr[3][0][1];
arr[3] 为 [[10, 11, 12], 13, 14]，arr[3][0] 为 [10, 11, 12]，并且 arr[3][0][1] 为 11。
08-02 使用 push() 操作数组
一个将数据添加到数组末尾的简单方法是 push() 函数
const arr1 = [1, 2, 3];
arr1.push(4);
const arr2 = ["Stimpson", "J", "cat"];
arr2.push(["happy", "joy"]);
arr1 现在值为 [1, 2, 3, 4]，arr2 值为 ["Stimpson", "J", "cat", ["happy", "joy"]]。
使用 pop() 操作数组
改变数组中数据的另一种方法是用 .pop() 函数。
.pop() 函数用来弹出一个数组末尾的值。 我们可以把这个弹出的值赋给一个变量存储起来。 换句话说就是 .pop() 函数移除数组末尾的元素并返回这个元素。
数组中任何类型的元素（数值，字符串，甚至是数组）都可以被弹出来 。
const threeArr = [1, 4, 6];
const oneDown = threeArr.pop();
console.log(oneDown);
console.log(threeArr);
第一个 console.log 将显示值 6，第二个将显示值 [1, 4]。
使用 shift() 操作数组 如果想要移出第一个元素要怎么办呢？
这时候我们就需要 .shift() 了。 它的工作原理就像 .pop()，但它移除的是第一个元素，而不是最后一个。
const ourArray = ["Stimpson", "J", ["cat"]];
const removedFromOurArray = ourArray.shift();
removedFromOurArray 值为 Stimpson，ourArray 值为 ["J", ["cat"]]
08-05 使用 unshift() 操作数组
.unshift() 函数用起来就像 .push() 函数一样，但不是在数组的末尾添加元素，unshift() 在数组的头部添加元素。
const ourArray = ["Stimpson", "J", "cat"];
ourArray.shift();
ourArray.unshift("Happy");
在 shift、ourArray 后值为 ["J", "cat"]。 在 unshift、ourArray 后值为 ["Happy", "J", "cat"]。
购物清单 创建一个名叫 myList 的购物清单。 清单的数据格式就是多维数组。
各组数据需用【】隔开
用函数编写可重用代码 在 JavaScript 中，我们可以把代码的重复部分抽取出来，放到一个函数 （functions）中。
function functionName() {
  console.log("Hello World");
}
functionName();
你可以通过函数名加上后面的小括号来调用（invoke）这个函数，就像这样： functionName(); 每次调用函数时，它都会在控制台上打印消息 Hello World。 
每次调用函数时，大括号之间的所有代码都将被执行。
将值传递给带有参数的函数









